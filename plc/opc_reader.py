"""
opc_reader.py ‚Äì OPC UA klient pre ƒç√≠tanie d√°t z PLC a z√°pis do datab√°zy

Tento skript sl√∫≈æi na pripojenie sa k PLC zariadeniam cez protokol OPC UA, naƒç√≠tanie aktu√°lnych
hodn√¥t senzorov a ulo≈æenie t√Ωchto hodn√¥t do datab√°zy pomocou Django ORM.

Pou≈æitie:
$ python opc_reader.py

Predpoklad√°, ≈æe PLC je definovan√© v datab√°ze a m√° priraden√© senzory s node_id.
"""

import sys
import pathlib
import os

# Dynamick√° inicializ√°cia Django prostredia pre skriptov√Ω beh mimo servera
BASE_DIR = pathlib.Path(__file__).resolve().parent.parent
sys.path.append(str(BASE_DIR))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')

import django
django.setup()

from opcua import Client
from plc.models import PLC, Sensor, SensorReading


def read_opcua_data(plc_name):
    """
    Pripoj√≠ sa k zvolen√©mu PLC (ak pou≈æ√≠va OPC UA), naƒç√≠ta d√°ta zo senzorov
    a ulo≈æ√≠ ich ako nov√© z√°znamy do datab√°zy.

    Argumenty:
    - plc_name: n√°zov PLC (z√°znam v datab√°ze)
    """
    try:
        plc = PLC.objects.get(name=plc_name)

        # Kontrola, ƒçi PLC pou≈æ√≠va OPC UA protokol
        if plc.protocol != 'opcua':
            print(f"‚ùå PLC {plc.name} nepodporuje OPC UA.")
            return

        # Zostavenie endpointu a pripojenie klienta
        endpoint = f"opc.tcp://{plc.ip_address}:{plc.port}"
        print(f"üîå Pokus o pripojenie k {endpoint}...")
        client = Client(endpoint)
        client.connect()
        print(f"‚úÖ Pripojen√© k {endpoint}")

        # Naƒç√≠tanie senzorov priraden√Ωch k PLC
        sensors = plc.sensors.all()
        print(f"üîç Naƒç√≠tan√Ωch senzorov: {sensors.count()}")

        for sensor in sensors:
            print(f"‚û°Ô∏è ƒå√≠tam {sensor.name} (node_id: {sensor.node_id})")
            try:
                node = client.get_node(sensor.node_id)
                value = node.get_value()

                # Ulo≈æenie hodnoty do datab√°zy
                SensorReading.objects.create(sensor=sensor, value=value)
                print(f"üíæ Ulo≈æen√©: {sensor.name} = {value}")
            except Exception as e:
                print(f"‚ö†Ô∏è Chyba pri ƒç√≠tan√≠ {sensor.name}: {e}")

        # Odpojenie klienta
        client.disconnect()
        print("üîå Odpojen√© od PLC.")

    except Exception as e:
        print(f"‚ùå Kritick√° chyba: {e}")


# Manu√°lne spustenie skriptu (napr. pri testovan√≠ alebo CRON √∫lohe)
if __name__ == "__main__":
    read_opcua_data("plc_compressor")
